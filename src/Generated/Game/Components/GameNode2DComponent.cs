//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherNode2D;

    public static Entitas.IMatcher<GameEntity> Node2D {
        get {
            if (_matcherNode2D == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.Node2D);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherNode2D = matcher;
            }

            return _matcherNode2D;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Entitas.Godot.Node2DComponent node2D { get { return (Entitas.Godot.Node2DComponent)GetComponent(GameComponentsLookup.Node2D); } }
    public Godot.Node2D Node2D { get { return node2D.Value; } }
    public bool hasNode2D { get { return HasComponent(GameComponentsLookup.Node2D); } }

    public GameEntity AddNode2D(Godot.Node2D newValue) {
        var index = GameComponentsLookup.Node2D;
        var component = (Entitas.Godot.Node2DComponent)CreateComponent(index, typeof(Entitas.Godot.Node2DComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceNode2D(Godot.Node2D newValue) {
        var index = GameComponentsLookup.Node2D;
        var component = (Entitas.Godot.Node2DComponent)CreateComponent(index, typeof(Entitas.Godot.Node2DComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveNode2D() {
        RemoveComponent(GameComponentsLookup.Node2D);
        return this;
    }
}
